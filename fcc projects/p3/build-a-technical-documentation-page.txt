** start of undefined **

<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
       <nav id="navbar">
        <header>JS DOCUMENTATION</header>
      <ul>    
     <li>  <a class="nav-link" href="#Introduction">Introduction</a></li>
       <li> <a class="nav-link" href="#Hello_World">Hello World</a></li>
       <li>  <a class="nav-link" href="#Variables">Variables</a></li>
        <li> <a class="nav-link" href="#Data_Structures">Data Structures</a></li>
      <li>  <a class="nav-link" href="#Function_declarations">Function declarations</a></li>
      <li>   <a class="nav-link" href="#Reference">Reference</a></li>
         </ul>    
      </nav>


      <main id="main-doc">
    <section class="main-section" id="Introduction">
        <header>Introduction</header>
        <p>JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.</p>
        <p>JavaScript contains a standard library of objects, such as Array, Date, and Math, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:
          <li>Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.</li>
          <li>Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.</li>
          </p>
      </section>

  <section class="main-section" id="Hello_World">
  <header>Hello World</header>
    <p>
    To get started with writing JavaScript, open the Scratchpad and write your first "Hello world" JavaScript code:
      <div class="code">
           <code> function greetMe(yourName) { alert("Hello " + yourName); }
            greetMe("World");</code></div>
          <p>Select the code in the pad and hit Ctrl+R to watch it unfold in your browser!</p>
    </p>
  </section>

    <section class="main-section" id="Variables">
      <header>Variables</header>
        <p>You use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules.</p>
        <p>You can declare a variable in three ways:</p>
        <p>With the keyword var. For example,</p>
        <div class="code"><code> var x = 42.</code></div>
        <p> This syntax can be used to declare both local and global variables.</p>
        <p>By simply assigning it a value. For example,</p>
        <div class="code"><code>x = 42.</code></div>
      </section>
                        
      <section class="main-section" id="Data_Structures">
        <header>Data Structures</header>
        <p>The latest ECMAScript standard defines seven data types:</p>
        <ul>
        <li>Six data types that are primitives:
          <ul>
            <li>Boolean. true and false.</li>
            <li>null. A special keyword denoting a null value. Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.</li>
            <li>undefined. A top-level property whose value is undefined.</li>
            <li>Number. 42 or 3.14159.</li>
            <li>String. "Howdy".</li>
            <li>Symbol (new in ECMAScript 2015). A data type whose instances are unique and immutable.</li>
            </ul>
        </li>
        </ul>
        <li>and Object</li>
          <p>Although these data types are a relatively small amount, they enable you to perform useful functions with your     applications. Objects and functions are the other fundamental elements in the language. You can think of objects as named containers for values, and functions as procedures that your application can perform.</p>
    </section>

      <section class="main-section" id="Function_declarations">
        <header>Function declarations</header>
        <p>A function definition (also called a function declaration, or function statement) consists of the function keyword,      followed by:
        </p>
        <ul>
        <li>The name of the function.</li>
        <li>A list of arguments to the function, enclosed in parentheses and separated by commas.</li>
        <li>The JavaScript statements that define the function, enclosed in curly brackets, { }.</li>
        </ul>
        <p>For example, the following code defines a simple function named square:</p>
        <div class="code"><code>function square(number) { return number * number; }</code></div>
        <p>The function square takes one argument, called number. The function consists of one statement that says to return the argument of the function (that is, number) multiplied by itself. The return statement specifies the value returned by the function.</p>
        <div class="code"><code>return number * number;</code></div>
        <p>Primitive parameters (such as a number) are passed to functions by value; the value is passed to the function, but if the function changes the value of the parameter, this change is not reflected globally or in the calling function.</p>
    </section>

      <section class="main-section" id="Reference">
        <header>Reference</header>
          <ul>
            <li>All the documentation in this page is taken from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/  Guide">MDN</a></li>
          </ul>
      </section>
    </main>
  </body>
  </html>

** end of undefined **

** start of undefined **

@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600&display=swap');
body{
  font-family: 'Playfair Display', serif;
  background-color: rgb(249, 249, 249);
}

.main-section{
  padding: 1rem;
  margin: 0;
  font-size: 16px;
}
.main-section li{
  padding: 6px;
  margin: 0;
  font-weight: 300;
}


/*nav*/
nav{
  display: flex;
  justify-content: space-around;
  align-items: center;
  padding: 10px;
  min-height: 7vh;
  background-color: bisque;
  position: sticky;
  top: 0;
  left: 0;
  width: 100%;
  margin: 0;
  z-index: 100;
}
nav ul{
  display: flex;
  justify-content: space-around;
  width: 75%;
}
nav a{
  color: black;
  text-decoration: none;
  letter-spacing: 3px;
  font-weight: bolder;
  font-size: 15px;
  transition: 250ms;
  overflow: hidden;
}
nav li{
  list-style: none;
  display: inline-block;
  font-size: 1rem;
  font-weight: 700;
  padding: auto;
  margin: auto;
}
nav ul li a:hover, nav ul li a:focus {
  color: black;
  background-color: white;
  font-weight: 900;
}

nav header{
  font-weight: 600;
}

header{
  font-size: 2rem;
  font-weight: 600;
}

.code{
  background-color: lightgray;
  padding: 20px;
  border-radius : 5px;
}


@media(max-width: 1199px)and(min-width: 769px){
  font-size: 1rem;
}


** end of undefined **

